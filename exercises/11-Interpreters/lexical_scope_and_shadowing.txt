<{}, let x=0 in x + (let x=1 in x)> (let)
  <{}, 0> ==> 0 (const)
  <{x: 0}, x + (let x = 1 in x)> (op: plus)
    <{x: 0}, x> ==> 0 (var)
    <{x: 0}, let x = 1 in x> ==> 1 (let)
      <{x: 0}, 1> ==> 1 (const)
      <{x: 1}, x> ==> 1 (var)
    0 + 1 = 1

<{}, let x=1 in let f=fun y -> x in let x=2 in f 0> ==> 1 (let)
  <{}, 1> ==> 1 (const)
  <{x: 1}, let f=fun y -> x in let x=2 in f 0> ==> 1 (let)
    <{x: 1}, fun y -> x> ==> (| fun y -> x, {x: 1}| ) (fun)
    <{x: 1, f: (| fun y -> x, {x: 1}| )}, let x = 2 in f 0> ==> 1 (let)
      <{x: 1, f: (| fun y -> x, {x: 1}| )}, 2> ==> 2 (const)
      <{x: 2, f: (| fun y -> x, {x: 1}| )}, f 0> ==> 1 (app)
        <{x: 2, f: (| fun y -> x, {x: 1}| )}, f> ==> (| fun y -> x, {x: 1}|) (var)
        <{x: 2, f: (| fun y -> x, {x: 1}| )}, 0> ==> 0 (const)
        <{x: 1}, x> ==> 1 (var)
