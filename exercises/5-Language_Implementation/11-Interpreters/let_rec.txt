  let rec fact = fun x -> if x <= 1 then 1 else x * (fact (x - 1)) in fact 3
--> (step let)
  (fact 3) {F / fact}
= F 3
--> (step rec)
  (F {F / fact}) 3
= (fun x -> if x <= 1 then 1 else x * (F (x - 1))) 3
--> (step application)
  (if x <= 1 then 1 else x * (F (x - 1))) {3 / x}
= if 3 <= 1 then 1 else 3 * (F (3 - 1))
--> (step <= operation)
  if false then 1 else 3 * (F (3 - 1))
--> (step if)
  3 * F (3 - 1)
--> (step rec)
  (3 * F (3 - 1)) { F / fact }
= 3 * ((fun x -> if x <= 1 then 1 else x * (F (x - 1))) (3 - 1))
--> (step - operation)
  3 * ((fun x -> if x <= 1 then 1 else x * (F (x - 1))) 2)
--> (step application)
  3 * ((if x <= 1 then 1 else x * (F (x - 1))) {2 / x})
= 3 * (if 2 <= 1 then 1 else 2 * (F (2 - 1)))
--> (step <= operation)
  3 * (if false then 1 else 2 * (F (2 - 1)))
--> (step if)
  3 * (2 * (F (2 - 1)))
--> (step rec)
  3 * (2 * (((fun x -> if x <= 1 then 1 else x * (fact (x - 1))) { F / fact }) (2 - 1)))
= 3 * (2 * ((fun x -> if x <= 1 then 1 else x * (F (x - 1))) (2 - 1)))
--> (step - operation)
  3 * (2 * ((fun x -> if x <= 1 then 1 else x * (F (x - 1))) 1))
--> (step application)
  3 * (2 * ((if x <= 1 then 1 else x * (F (x - 1))) { 1 / x }))
= 3 * (2 * (if 1 <= 1 then 1 else 1 * (F (1 - 1))))
--> (step <= operation)
  3 * (2 * (if true then 1 else 1 * (F (1 - 1))))
--> (step if)
  3 * (2 * 1)
--> (step * operation)
  3 * 2
--> (step * operation)
  6
